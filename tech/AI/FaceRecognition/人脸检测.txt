
---------------------------------------------------------------------------------

人脸检测算法概述

http://deyituo.github.io/2016/06/07/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/

这篇文章总的来说还是写得非常好的，虽然泛泛而谈，但比较全面。

-----------------------------------------------

自 2001 年 Viola 和 Jones [1] 将级联分类器的概念引入到人脸检测领域， 其后发展起来的人脸检测算法被设计成更好地处理多角度检测， 遮挡， 模糊等问题 [15][16]。

这些算法主要有三大类分支， 第一类是基于级联结构及其改进的算法， 如文献 [6][17][18] 中所提到的人脸检测方法在特征表达， 分类器构造， 运行速率， 多角度模板均进行了大量的改进。级联分类使得检测时非人脸区域可以快速排除， 从而获得了高效的运行速率。 这类人脸检测系统已经被广泛地运用于银行， 摄像头监控系统， 移动手机， 网络社区等。

第二类是基于弹性不变模型 (DPM) [8] 的算法， 这类算法的模型包含若干组成部分， 而这些组成部分通过位置关系进行约束得到整体人脸的检测模型， 这类模型对人脸的形变及遮挡具有很好的适应性和很高的灵活性。 文献 [9]在得到组成部分的同时进行了人脸标定点， 人脸角度的检测。

第三类是基于神经网络的人脸检测算法， 神经网络主要由若干层卷积层， Pooling 层， 全连接层组成， 对图像提取的卷积网络特征对人脸有更高层次的表达性。 文献 [19] 通过训练多个神经网络模型来提高人脸检测效果。 由于局部最优问题 [20] 及训练困难， 过去研究者们更多地进行前两类算法的研究。 随着近年来深度卷积网络的成功， 神经网络算法重新被研究者们所重视。

---------------------------------------------------------------------------------

浅析人脸检测之Haar分类器方法

http://www.cnblogs.com/ello/archive/2012/04/28/2475419.html

Haar分类器你敢更快点吗？！

这一章我简略的探讨下Haar分类器的检测效率。

我尝试过的几种方法：

1）尝试检测算法与跟踪算法相结合，原本以为Camshift是个轻量级的算法，但是正如我后来看到的，建立反向投影图的效率实在不高，在PC上效果不错，但是在ios上速度很慢，这个我后来发现可能是因为ios浮点运算效率不高的原因。但是即便速度能上去，靠Camshift跟踪算法太依赖肤色了，导致脖子，或是手什么的干扰很严重，这个调起来很费神，也不一定能调好。
2）修改OpenCV中Haar检测函数的参数，效果非常明显，得出的结论是，搜索窗口的搜索区域是提高效率的关键。
3）根据2）的启发，我打算利用YCbCr颜色空间，粗估肤色区域，以减少人脸的搜索面积，但是后来苦于没能高效率的区分出肤色区域，放弃了该方法。
4）换了策略，考虑到视频中人脸检测的特殊性，上一帧人脸的位置信息对下一帧的检测有很高的指导价值，所以采有帧间约束的方法，减少了人脸搜索的区域，并且动态调整Haar检测函数的参数，得到了较高的效率。
5）其他关于算法之外的优化需要根据不同的处理器做具体的优化。

---------------------------------------------------------------------------------





---------------------------------------------------------------------------------
