
---------------------------------------------------------------------------------

基于API HOOK的剪贴板监控

http://blog.csdn.net/menghjs/article/details/6027757

介绍了 Ring3 层的 剪贴板 API Hook。

---------------------------------------------------------------------------------

Win64 驱动内核编程 -- 22. SHADOW SSDT HOOK

http://blog.csdn.net/u013761036/article/details/66473126

点评：原理还算全面，但逻辑比较混乱，代码也非常混乱，不过还是值得参考一下。
代码看起来是 Win64 的，但还有待进一步验证。


Win64 驱动内核编程 -- 23. Ring0 InLineHook 和 UnHook

http://blog.csdn.net/u013761036/article/details/66477613

简单介绍了 INLINE HOOK 的原理，已经汇编引擎的作用。


Win64 驱动内核编程 -- 24. 64位驱动里内嵌汇编

http://blog.csdn.net/u013761036/article/details/66477711

---------------------------------------------------------------------------------

详谈内核三步走 Inline Hook 实现

http://blog.csdn.net/rrrfff/article/details/6690818

仅仅只介绍了 x86 模式下的 inline hook，但是介绍了下面几个要点：

--------------------

说明三点：

1、堆栈平衡是重中之重，参数压栈也需要格外注意；

2、Ring 0 模式下内存是不允许写的，需要去除写保护，设置 CR0 寄存器；

3、提高中断级别到 DPC，禁止内核里的线程切换； (使用 KeRaiseIrqlToDpcLevel() 函数)

--------------------

这种方法就是通过已导出函数定位未导出函数通常使用的方法，具有通用性。


---------------------------------------------------------------------------------

x64 windows下的inline hook

http://blog.csdn.net/lactoferrin/article/details/7216207

介绍了 x64 下 inline hook 的整个流程，原理和细节，很有实战意义。

这个仅作为学习资料，在正式场合请使用 Detours(x64要钱) 或免费的 N-CodeHook 。

2012-01-27 17:48

---------------------------------------------------------------------------------

x86 的控制寄存器 CR0,CR1,CR2,CR3

http://www.cnblogs.com/ahuo/archive/2009/02/10/1387816.html

x64 模式下的 cr0 设置说明

http://www.mouseos.com/arch/005.html

---------------------------------------------------------------------------------

Inline Hook Sysenter(绕过绝大多数的rootkit检测工具的检测)

http://www.blogfshare.com/sysenter-inline-hook.html

介绍了一种绕过一般的 rootkit 检测工具的 Inline Hook 方法。

---------------------------------------------------------------------------------








---------------------------------------------------------------------------------

[分享]老文章系列：过 Patchguard 的梗

http://bbs.pediy.com/thread-187214.htm

---------------------------------------------------------------------------------

KeServiceDescriptorTable 结构及获取 (根据这篇文章更新了 x64 模式下 KeServiceDescriptorTable 的结构定义)

http://blog.csdn.net/zkzqlove/article/details/21236243

以及介绍了三种改变 SSDT 内存保护的方法.

---------------------------------------------------------------------------------

x64 下的 KeServiceDescriptorTable 结构定义

See: http://www.fx114.net/qa-62-58850.aspx

在 64 位系统，内核函数开头地址的低四位一般是0，形如: xxxxxxxx`xxxxxxx0，这一特征在 SSDT 表中有很强大的引用，SSDT 表在 64 位系统于 32 位系统有较大的差别。

以下是在 64 位系统下的 KeServiceDescriptorTable：

kd> dp KeServiceDescriptorTable

fffff800`0117bb80   fffff800`01076e00 00000000`00000000
fffff800`0117bb90   00000000`00000128 00000000`00000000

表的第二项于第四项都为 0，这两项在 32 位系统下分别对应 ServiceCounterTableBase 与 ParamTableBase 。

SSDT 表还是同 32 位系统每 4 字节表示一项，由于函数的起始地址最低四位都是 0，所以微软将 SSDT 中的低四位用来记录这个函数有多少个参数。
并且由于表的每一项都为四个字节，保存的就不可能是绝对地址，而是相对 KeServiceDescriptorTable 表的地址。

所以地址计算方法如下：

FuncAddr = (KeServiceDescriptortable + [KeServiceDescriptortable + index * 4]) & 0xFFFFFFF0

用虾窝中的公式，尝试了一下，果然找到了正确的地址。

---------------------------------------------------------------------------------

Shadow SSDT x64

http://www.xuebuyuan.com/1858119.html

---------------------------------------------------------------------------------

SSDT

http://uninformed.org/index.cgi?v=3&a=3&p=9

------------------------------------------------------------------

One of the areas most notorious for being hooked by third-party drivers is the System Service Descriptor Table, also known as the SSDT. This table contains information about the service tables that are used by the operating for dispatching system calls. On Windows x64 kernels, nt!KeServiceDescriptorTable conveys the address of the actual dispatch table and the number of entries in the dispatch table for the native system call interface. In this case, the actual dispatch table is stored as an array of relative offsets in nt!KiServiceTable. The offsets are relative to the array itself using relative addressing. To obtain the absolute address of system service routines, the following approach can be used:

kd> u dwo(nt!KiServiceTable) + nt!KiServiceTable L1

nt!NtMapUserPhysicalPagesScatter:
fffff800`013728b0 488bc4           mov     rax,rsp

kd> u dwo(nt!KiServiceTable + 4) + nt!KiServiceTable L1

nt!NtWaitForSingleObject:
fffff800`012b83a0 4c89442418       mov     [rsp+0x18],r8

The fact that the dispatch table now contains an array of relative addresses is one hurdle that driver developers who intend to port system call hooking code from 32-bit platforms to the x64 kernel will have to overcome. One solution to the relative address problem is fairly simple. There are plenty of places within the 2 GB of relative addressable memory that a trampoline could be placed for a hook routine. For instance, there is often alignment padding between symbols. This approach is rather hackish and it depends on the fact that PatchGuard is forcibly disabled. However, there are also other, more elegant approaches to accomplishing this that require neither.

As far as protecting the system service table is concerned, PatchGuard protects both the native system service dispatch table stored in nt!KiServiceTable as well as the nt!KeServiceDescriptorTable structure itself. This is done by making use of the nt!PgCreateBlockChecksumSubContext routine that was mentioned in the section on system images ([*]). The following code shows how the block checksum routine is called for both items:

PgCreateBlockChecksumSubContext(
    ParentContext,
    0,
    KeServiceDescriptorTable->DispatchTable, // KiServiceTable
    KiServiceLimit * sizeof(ULONG),
    0,
    NULL);

PgCreateBlockChecksumSubContext(
    ParentContext,
    0,
    &KeServiceDescriptorTable,
    0x20,
    0,
    NULL);

The reason the nt!KeServiceDescriptorTable structure is also protected is to prevent the modification of the attribute that points to the actual dispatch table.

------------------------------------------------------------------

Google翻译:

系统服务描述符表（也称为SSDT）是与第三方驱动程序挂钩的最为臭名昭着的区域之一。 此表包含有关用于调度系统调用的操作使用的服务表的信息。 在Windows x64内核上，nt！KeServiceDescriptorTable传递实际分派表的地址和本机系统调用接口的调度表中的条目数。在这种情况下，实际的分派表存储为nt！KiServiceTable中的相对偏移数组。 偏移量相对于阵列本身使用相对寻址。 要获取系统服务程序的绝对地址，可以使用以下方法：

kd> u dwo(nt!KiServiceTable) + nt!KiServiceTable L1

nt!NtMapUserPhysicalPagesScatter:
fffff800`013728b0 488bc4           mov     rax, rsp

kd> u dwo(nt!KiServiceTable + 4) + nt!KiServiceTable L1

nt!NtWaitForSingleObject:
fffff800`012b83a0 4c89442418       mov     [rsp + 0x18], r8

调度表现在包含一个相对地址数组的事实是一个障碍，即将系统调用挂钩代码从32位平台迁移到x64内核的驱动程序开发人员将必须克服。相对地址问题的一个解决方案是相当简单的。2 GB的相对可寻址内存中有很多地方可以将蹦床放置在挂钩程序中。例如，符号之间经常有对齐填充。这种方法相当骇人听闻，这取决于PatchGuard被强制禁用的事实。 然而，还有其他更优雅的方法来实现这一点，既不需要。

就保护系统服务表而言，PatchGuard保护存储在nt！KiServiceTable中的本机系统服务调度表以及nt！KeServiceDescriptorTable结构本身。这是通过使用系统映像（[*]）部分中提到的nt！PgCreateBlockChecksumSubContext例程完成的。以下代码显示了如何为两个项目调用块校验和例程：

    BlockChecksumContext context;
    context = PgCreateBlockChecksumSubContext(
        ParentContext,
        0,
        KeServiceDescriptorTable->ntoskrnel.ServiceTableBase,   // KiServiceTable
        KiServiceLimit * sizeof(ULONG),                         // KeServiceDescriptorTable->ntoskrnel.NumberOfService
        0,
        NULL);

    context = PgCreateBlockChecksumSubContext(
        ParentContext,
        0,
        &KeServiceDescriptorTable,
        0x20,                           // sizeof(SERVICE_DESCRIPTOR_TABLE), 0x40
                                        // (0x20 是其中的 ntoskrnel.exe 和 win32k.sys 两个 SYSTEM_SERVICE_TABLE 的大小, 因为后面两个SST表未使用)
        0,
        NULL);

nt!KeServiceDescriptorTable 结构也受到保护的原因是防止修改指向实际分派表的属性。

---------------------------------------------------------------------------------

