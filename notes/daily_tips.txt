
Windows IOCP AccepteEx() 的一些技巧:

http://stackoverflow.com/questions/19956186/iocp-acceptex-not-creating-completion-upon-connect

Call setsockopt() with SO_UPDATE_ACCEPT_CONTEXT on the accepted socket using the listening socket as the data...

If you do not want AcceptEx() to wait for data to arrive then simply provide a data buffer that is ONLY big enough for the addresses to be returned and pass 0 as the 'buffer size'. This will cause the AcceptEx() to operate like an overlaped accept() and return as soon as the connection is established.

Note that Martin James' initial comment to your question is in fact the answer you're looking for. Don't pass outBufLen - ((sizeof (sockaddr_in) + 16) * 2), pass 0.

See:

Boost 1.60
--------------

--------------------------------------------------------------------------------------------------

D:\Project\Boost\boost_1_60_0\boost\asio\detail\impl\win_iocp_socket_service_base.ipp

Line 473:

void win_iocp_socket_service_base::start_accept_op()

      DWORD bytes_read = 0;
      BOOL result = ::AcceptEx(impl.socket_, new_socket.get(), output_buffer,
          0, address_length, address_length, &bytes_read, op);

--------------------------------------------------------------------------------------------------

D:\Project\Boost\boost_1_60_0\boost\asio\detail\impl\socket_ops.ipp

Line 179:

complete_iocp_accept()

    // Need to set the SO_UPDATE_ACCEPT_CONTEXT option so that getsockname
    // and getpeername will work on the accepted socket.
    SOCKET update_ctx_param = s;
    socket_ops::state_type state = 0;
    socket_ops::setsockopt(new_socket, state,
          SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT,
          &update_ctx_param, sizeof(SOCKET), ec);

--------------------------------------------------------------------------------------------------


h2o/picohttpparser / SSE 4.2 _mm_cmpestri

https://github.com/h2o/picohttpparser/blob/master/picohttpparser.c


_mm_cmpestri

See: https://msdn.microsoft.com/en-us/library/bb531465(v=vs.120).aspx

_mm_cmpestra (Have example code)

See: https://msdn.microsoft.com/en-us/library/bb514048(v=vs.120).aspx

--------------------------------------------------------------------------------------------------

Java 线程 — ThreadLocal (关于Java TLS的挺有建设性的一篇文章)
=================================================================

See: http://www.cnblogs.com/sunshine-2015/p/6072184.html


神奇的 0x61c88647
-------------------

在ThreadLocalMap的hash算法中，很少发生碰撞，原因在于精巧的hash算法

private final int threadLocalHashCode = nextHashCode();

private static final int HASH_INCREMENT = 0x61c88647;

private static int nextHashCode() {
    return nextHashCode.getAndAdd(HASH_INCREMENT);
}

private Entry getEntry(ThreadLocal key) {
    int i = key.threadLocalHashCode & (table.length - 1);
    Entry e = table[i];
    if (e != null && e.get() == key)
        return e;
    else
        return getEntryAfterMiss(key, i, e);
}

这里最不解的是为什么要用0x61c88647这个数？怎么来的？
0x61c88647换算成十进制是1640531527，计算方法如下：

1640531527 = (long) ((1L << 31) * (Math.sqrt(5) - 1))

(Math.sqrt(5) - 1) / 2 是黄金分割数

这种hash方法是Donald Knuth在 The Art of Computer Programming 中提出，不明觉厉。

--------------------------------------------------------------------------------------------------

ImageNet缔造者：让冰冷的机器读懂照片背后的故事

李飞飞

http://www.leiphone.com/news/201604/uD8o9lV0AhJRhcit.html

--------------------------------------------------------------------------------------------------

手机VR软件大横评：想看羞羞视频？这几个最好用

http://mt.sohu.com/20161101/n471983244.shtml

编者注：此次入选评测的是 “暴风魔镜Pro、3D播播、三目VR、橙子VR、3D热播、3D播播、VR世界、第一VR、VR800、柚看VR、微鲸VR、乐视VR、脑穿越VR和妙境”这十四款主流的手机VR软件。为了保证数据的统一性和严谨性，相关数据基于Android 平台测试。

--------------------------------------------------------------------------------------------------

为什么多线程读写 shared_ptr 要加锁？（陈硕）

http://blog.csdn.net/solstice/article/details/8547547

（shared_ptr）的引用计数本身是安全且无锁的，但对象的读写则不是，因为 shared_ptr 有两个数据成员，读写操作不能原子化。根据文档（ http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm#ThreadSafety ）， shared_ptr 的线程安全级别和内建类型、标准库容器、std::string 一样，即：

• 一个 shared_ptr 对象实体可被多个线程同时读取（文档例1）；

• 两个 shared_ptr 对象实体可以被两个线程同时写入（例2），“析构”算写操作；

• 如果要从多个线程读写同一个 shared_ptr 对象，那么需要加锁（例3~5）。

请注意，以上是 shared_ptr 对象本身的线程安全级别，不是它管理的对象的线程安全级别。

--------------------------------------------------------------------------------------------------

【C++ & 汇编】try-catch异常处理机制的汇编实现

https://my.oschina.net/ybusad/blog/186545

介绍 C++ 中 try-catch 异常处理机制的汇编实现。

--------------------------------------------------------------------------------------------------

C++ 异常

http://blog.csdn.net/chenlycly/article/details/44871061

关于 C++ 异常的使用，注意事项等，还算全面，未包含 C++ 11 以后的内容。

--------------------------------------------------------------------------------------------------

怎么在 C++ 里实现一个常量表达式的计数器

How to implement a constant-expression counter in C++

http://b.atch.se/posts/constexpr-counter/


Non-constant constant-expressions in C++

http://b.atch.se/posts/non-constant-constant-expressions/


经过两篇文章的阅读, 基本掌握了原理, 下面是 purecpp.org 上的摘录, 此方法在 vc++ 上存在问题, vc++ 版本请看上面的两篇文章.

http://purecpp.org/?p=1144

2017/2/14

--------------------------------------------------------------------------------------------------

Is it possible to obtain the address of a implicit instantiation of a function template?

http://stackoverflow.com/questions/29522800/is-it-possible-to-obtain-the-address-of-a-implicit-instantiation-of-a-function-t

Answer1:

    auto callable = +[](A<int> a, A<int> b) { return hello(a, b); };

Answer2:

原版的代码请看原文, 下面是经过本人略做修改后的代码(修改模板参数名称,更容易理解一点):

    #include <functional>
    #include <iostream>

    template <class A>
    void func(A a, int b)
    {
        std::cout << "a=" << a << " b=" << b << "\n";
    }

    template <typename... Args>
    class proxy_func
    {
    public:
        static auto call(Args... args) -> decltype(func(args...))
        {
            return func(args...);
        }
    };

    template <template <typename...> typename Proxy, typename... Args>
    void * addr_of(Args... args)
    {
        return (void *)&Proxy<Args...>::call;
    }

    template <template <typename...> typename Proxy, typename... Args>
    auto call(Args... args) -> decltype(Proxy<Args...>::call(args...))
    {
        return Proxy<Args...>::call(args...);
    }

    template <class T>
    void test()
    {
        T value = 1;
        printf("func > %p\n", &func<T>);
        printf("func > ");
        func(value, 1);
        printf("proxy> %p\n", &proxy_func<T, int>::call);
        printf("proxy> ");
        proxy_func<T, int>::call(value, 1);
        printf("auto > %p\n", addr_of<proxy_func>(value, 1));
        printf("auto > ");
        call<proxy_func>(value, 1);
    }

    int main(int argc, char ** argv)
    {
        printf("==int==\n");
        test<int>();
        printf("==long==\n");
        test<long>();
    }


result:

g++ -std=c++11 -o /tmp/test /tmp/test.cpp && /tmp/test

==int==
func > 0x400a8d
func > a=1 b=1
proxy> 0x400ae6
proxy> a=1 b=1
auto > 0x400ae6
auto > a=1 b=1
==long==
func > 0x400b35
func > a=1 b=1
proxy> 0x400b91
proxy> a=1 b=1
auto > 0x400b91
auto > a=1 b=1

补充: (用宏实现定义不同的 proxy_func 类)

#define proxy_func(f)                           \
    template <class... A>                       \
    class proxy_func_ ## f                      \
    {                                           \
    public:                                                     \
        static auto call(A... args) -> decltype(f(args...))     \
        {                                                       \
            return f(args...);                                  \
        }                                                       \
    }

proxy_func(func);

2017/2/14

--------------------------------------------------------------------------------------------------

Try catch statements in C

http://stackoverflow.com/questions/10586003/try-catch-statements-in-c

While some of the other answers have covered the simple cases using setjmp and longjmp, in a real application there's two concerns that really matter.

    1. Nesting of try/catch blocks. Using a single global variable for your jmp_buf will make these not work.
    2. Threading. A single global variable for you jmp_buf will cause all kinds of pain in this situation.

The solution to these is to maintain a thread-local stack of jmp_buf that get updated as you go. (I think this is what lua uses internally).

So instead of this (from JaredPar's awesome answer)

    static jmp_buf s_jumpBuffer;

    void Example() {
      if (setjmp(s_jumpBuffer)) {
        // The longjmp was executed and returned control here
        printf("Exception happened\n");
      } else {
        // Normal code execution starts here
        Test();
      }
    }

    void Test() {
      // Rough equivalent of `throw`
      longjump(s_jumpBuffer, 42);
    }

You'd use something like:

    #define MAX_EXCEPTION_DEPTH 32;

    struct exception_state {
      int current_depth;
      jmp_buf jumpBuffer[MAX_EXCEPTION_DEPTH];    
    };

    __thread struct exception_state g_exception_state;

    int try_point(struct exception_state * state) {
      if(current_depth == MAX_EXCEPTION_DEPTH) {
         abort();
      }
      int ok = setjmp(state->jumpBuffer[state->current_depth]);
      if(ok) {
        state->current_depth++;
      } else {
        // We've had an exception update the stack.
        state->current_depth--;
      }
      return ok;
    }

    void catch_point(struct exception_state * state) {
      state->current_depth--;
    }

    void end_try_point(struct exception_state * state) {
      state->current_depth--;
    }

    void throw_exception(struct exception_state * state) {
      longjump(state->jumpBuffer[state->current_depth - 1], 1);
    }

    void Example() {
      if (try_point(&g_exception_state)) {
        catch_point(&g_exception_state);
        printf("Exception happened\n");
      } else {
        // Normal code execution starts here
        Test();
        end_try_point(&g_exception_state);
      }
    }

    void Test() {
      // Rough equivalent of `throw`
      throw_exception(g_exception_state);
    }

2017/2/14

--------------------------------------------------------------------------------------------------

使用 Let's Encrypt 和 Nginx 从同一服务器托管多个 HTTPS 域名 (翻译)

https://www.oschina.net/translate/running-multiple-https-domains-from-the-same-server

Let's Encrypt 证书自动续签脚本

/etc/letsencrypt/auto_renew.sh

    #!/bin/sh
    # This script renews all the Let's Encrypt certificates with a validity < 30 days

    if ! /opt/letsencrypt/letsencrypt-auto renew > /var/log/letsencrypt/renew.log 2>&1 ; then  
        echo Automated renewal failed:
        cat /var/log/letsencrypt/renew.log
        exit 1
    fi  
    nginx -t && nginx -s reload

现在将以上的脚本添加到计划任务, 执行 sudo crontab -e 添加下面一行代码:

@daily  /etc/letsencrypt/auto_renew.sh

-------------------------------------------

原文链接:

Hosting Multiple HTTPS Domains from the Same Server with Let's Encrypt and Nginx

https://blog.benroux.me/running-multiple-https-domains-from-the-same-server/

--------------------------------------------------------------------------------------------------

EXACT STRING MATCHING ALGORITHMS (比较全面的字符串匹配算法介绍, 英文, 来自法国的网站)

http://www-igm.univ-mlv.fr/~lecroq/string


字符串匹配的KMP算法

http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html

字符串匹配的Boyer-Moore算法

http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html

--------------------------------------------------------------------------------------------------

String Matching

http://www.csie.ntnu.edu.tw/~u91029/StringMatching.html

一个台湾教育网的网站，从 http://www-igm.univ-mlv.fr/~lecroq/string 翻译整理而来，加上自己的理解，有一定的参考价值。

--------------------------------------------------------------------------------------------------

字符串模式匹配算法——BM、Horspool、Sunday、KMP、KR、AC算法一网打尽

http://dsqiu.iteye.com/blog/1700312

这个文章还算有一些参考价值, 可以一看.

-------------------------------------------

字符串匹配算法

http://www.cnblogs.com/gaochundong/p/string_matching.html

只介绍了朴素算法, KMP 和 BoyerMoore 算法, 参考价值一般.

--------------------------------------------------------------------------------------------------

敏感词项目中的柔性字符串匹配问题 (介绍了 KMP, BM, Horspool 算法, 多字符串匹配, 自动机等)

http://guokr.github.io/pattern-matching-problem.html

(C) 2015 果壳网平台组

--------------------------------------------------------------------------------------------------

怎么在 C++ 里实现一个常量表达式的计数器 （其实这个前面贴过，再贴一次）

How to implement a constant-expression counter in C++

http://b.atch.se/posts/constexpr-counter/

Non-constant constant-expressions in C++

http://b.atch.se/posts/non-constant-constant-expressions/

--------------------------------------------------------------------------------------------------

写代码用哪种字体看起来最舒适？

https://www.zhihu.com/question/32058777?sort=created

其中推荐的字体有：

Consolas, Roboto Mono, Monaco, Menlo, Ubuntu Mono, Fira Code, Inconsolata-g

注: Menlo 字体有点瘦长, 不够好; Roboto Mono 字体不错.

------------------------------------------

Fira Code, 还有一种是 Fira Mono.

https://www.fontsquirrel.com/fonts/fira-code
https://www.fontsquirrel.com/fonts/fira-mono

--------------------------------------------------------------------------------------------------

Hack Font 字体 (这个字体不错)

    Hack 是一种专门用来显示编程语言的字体。

官方更新地址：

    https://github.com/chrissimpkins/Hack

介绍文章：

    https://www.oschina.net/p/hack-font

--------------------------------------------------------------------------------------------------

漂亮的等宽字体 Inconsolata

    Inconsolata 是一款看起来很漂亮的 monospace font（等宽字体），尤其适合在终端下和写代码的朋友使用。

官方地址：

    https://github.com/google/fonts/tree/master/ofl/inconsolata

下载链接：

    http://www.levien.com/type/myfonts/inconsolata.html

Windows 系统下载：.otf 格式文件

Linux 系统下载： .pfa 格式文件

--------------------------------------------------------------------------------------------------

Inconsolata-g 字体 (这个字体比 Inconsolata 好看，Inconsolata 有点瘦长)

https://github.com/powerline/fonts/tree/master/Inconsolata-g

--------------------------------------------------------------------------------------------------

Luxi Mono 字体 （还可以）

如果你很喜欢 Mac 的 Lucida Font（应该说是这个系列里面的 Lucida Grande）， 但是，你又不愿意侵权复制来使用。这样可以考虑用 Luxi Font，Luxi Font 字形和 Lucida Font 类似，而且在 Linux 下，Luxi Font 的大小比 Lucida Font 更加适合~

最最最重要的是 Luxi Font 是免费的~ 可以随便使用，但是不能修改~ 这个字体的作者是： Kris Holmes 和 Charles Bigelow。 Lucida Font 就是他们的前作~ 很意外， 所以，Luxi 和 Lucida 是兄弟来的哦~ 可见 Luxi 的高质量啦~

https://www.oschina.net/p/luxi

下载地址：

https://www.fontsquirrel.com/fonts/Luxi-Mono

--------------------------------------------------------------------------------------------------

最适合程序员编程的10款字体

https://my.oschina.net/weichou/blog/359860

排名如下：

1. Inconsolata (还不如 Inconsolata-g, 排第一完全是由于作者个人喜欢)
2. Consolas  (字体大小为11时, 效果不错, 行间距比一般的字体稍大)
3. Deja Vu Sans Mono (比 Droid Sans Mono 稍差一点, 两者很相似)
4. Droid Sans Mono  (还不错, 比第 3 的好那么一点)
5. Proggy
6. Monofur
7. Profont
8. Monaco  （Mac的默认字体, 还不错, 但缺点(特点)是行间距比较大）
9. Andale Mono
10. Courier / Courier New (以前觉得还不错, 现在看的确不是最好的选择)

具体可看帖子。

我个人的排名是:

1. Consolas
2. Roboto Mono
3. Droid Sans Mono
4. HackFont
5. Deja Vu Sans Mono
6. 宋体/新宋体
7. Monaco
8. Fira Code/Fira Mono
9. Menlo
10. Inconsolata-g
11. Courier / Courier New

以上排名其实很难排的, 大体排名是这样, 当下会使用哪一个, 得看当时的心情和当下能忍受/接受某个字体缺点的程度,
人的想法是会变的, 或许显示屏大小和点距大小也有所不同.

几个基本的原则就是: 等宽, 字体美观, 清晰好辨认, 0, o, 1, i 容易区分, 行间距适中, 
字体不要太瘦长(本人不太喜欢瘦长的字体, 也许有的人喜欢).

原帖地址：（原帖图片已失效）

http://blog.csdn.net/huangliangjie/article/details/6774356

--------------------------------------------------------------------------------------------------

全局压缩-革命性的数据库技术 (奏爷公司的主页)

http://nark.cc/

nark 数据库

--------------------------------------------------------------------------------------------------

Shell学习总结之逻辑运算符及表达式 (一个还不错的关于 Shell 逻辑运算符和表达式的文章，很早之前搜到的)

http://blog.csdn.net/wirelessqa/article/details/19758479

2017/4/19

--------------------------------------------------------------------------------------------------

The Undocumented Functions (Microsoft Windows NT/2000/XP/Win7)

Currently includes: UserMode (Kernel Mode soon)

This is an advanced, low-level programer's guide to Windows NT Kernel, Native API and drivers.
All remarks, fixes and comments are very welcome.

（Windows NT/2000/XP/Win7 未公开的函数，目前只包含用户态的函数）

http://undocumented.ntinternals.net/index.html?page=title.html

--------------------------------------------------------------------------------------------------

FileSpy (一个监控文件系统驱动IRP等请求的工具)

http://www.zezula.net/en/fstools/filespy.html

FileTest (张文骁推荐)

A tool for interactive calling file system APIs (一个调用系统文件系统API函数的交互工具, 有源码)

http://www.zezula.net/en/fstools/filetest.html

源码: https://github.com/ladislav-zezula/FileTest

--------------------------------------------------------------------------------------------------

Spying a file system (一个利用系统API接口获得文件系统的一些常规消息通知的源码)

https://www.codeproject.com/Articles/4997/Spying-a-file-system

-----------------------------------------------------------------------

Introduction

Windows applications can do dynamic monitoring of any specified directory. Once changes have occurred and are detected, the spy application can run various tasks ( run antivirus, log activity, determine more information about changes, call other tasks etc).

Win 32 API provides three functions that are based on the events:

    FindFirstChangeNotification
    FindNextChangeNotification
    FindCloseChangeNotification
    ReadDirectoryChangesW 

These allow creating watchdog or spying applications.

-----------------------------------------------------------------------

Win32 API provides also ReadDirectoryChangesW that can operate with following filters (MSDN) :

* FILE_NOTIFY_CHANGE_FILE_NAME	

Any file name change in the watched directory or subtree causes a change notification wait operation to return. Changes include renaming, creating, or deleting a file.

* FILE_NOTIFY_CHANGE_DIR_NAME	

Any directory-name change in the watched directory or subtree causes a change notification wait operation to return. Changes include creating or deleting a directory.

* FILE_NOTIFY_CHANGE_ATTRIBUTES	

Any attribute change in the watched directory or subtree causes a change notification wait operation to return.

* FILE_NOTIFY_CHANGE_SIZE	

Any file-size change in the watched directory or subtree causes a change notification wait operation to return. The operating system detects a change in file size only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.

* FILE_NOTIFY_CHANGE_LAST_WRITE	

Any change to the last write-time of files in the watched directory or subtree causes a change notification wait operation to return. The operating system detects a change to the last write-time only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.

* FILE_NOTIFY_CHANGE_LAST_ACCESS	

Any change to the last access time of files in the watched directory or subtree causes a change notification wait operation to return.

* FILE_NOTIFY_CHANGE_CREATION	

Any change to the creation time of files in the watched directory or subtree causes a change notification wait operation to return.

* FILE_NOTIFY_CHANGE_SECURITY	

Any security-descriptor change in the watched directory or subtree causes a change notification wait operation to return.

--------------------------------------------------------------------------------------------------

How to translate a virtual memory address to a physical address?

http://stackoverflow.com/questions/366602/how-to-translate-a-virtual-memory-address-to-a-physical-address

关于在内核态如果从虚拟内存地址转换为物理内存地址.

--------------------------------------------------------------------------------------------------

NtQueryVirtualMemory 枚举进程模块

http://www.cnblogs.com/icew4y/p/3694984.html

使用 NtQueryVirtualMemory() 函数在用户态驱动里枚举进程引用的所有模块.

通过 KeServiceDescriptorTable 获取 NtQueryVirtualMemory() 的函数入口地址.

NtQueryVirtualMemory = (PNtQueryVirtualMemory)KeServiceDescriptorTable->ntoskrnl.ServiceTableBase[uIndex];

--------------------------------------------------------------------------------------------------

SSDT, Shadow SSDT HOOK 进程防护

http://www.cnblogs.com/icew4y/p/3639064.html

模仿 PCHunter，利用 SSSDT, SSDT HOOK 来对进程进行防护, 例如: Hook NtUserFindWindowEx(), NtUserPostMessage(), NtUserDestroyWindow() 函数.

--------------------------------------------------------------------------------------------------

我后十年的技术路

http://www.yiiyee.cn/Blog/%E5%8D%81%E5%B9%B4/

《竹林蹊径》的作者张佩，2010年编写《竹林蹊径》，后在 ADM 工作，两年前，在Intel开源部门参与GPU虚拟化之开发至今。17年新年伊始，立志要在技术内容创作分享上，重新发力。

这篇文章写于 2015 年 6 月 12 日，对过去驱动开发的一些反思。

--------------------------------------------------------------------------------------------------

全局观Windows BCD

http://www.yiiyee.cn/Blog/bcd-1/

这是一篇解读 Windows 的 bcdedit 的深度好文。

--------------------------------------------------------------------------------------------------

GPU异步V-Sync技术方案

http://www.yiiyee.cn/Blog/vsync/

--------------------------------------------------------------------------------------------------

NSIS 静默安装VC运行库安装包

http://blog.csdn.net/wwwwxhh/article/details/55210882

ExecWait 'vcredist_x86.exe'             # 一般的安装
ExecWait '"vcredist_x86.exe" /q'        # silent install 静默安装
ExecWait '"vcredist_x86.exe" /q:a'      # silent install, display a progress dialog but requires no user interaction.
ExecWait '"vcredist_x86.exe" /qb'       # unattended install 无人值守安装
ExecWait 'vcredist_x86.exe /q:a /c:"msiexec /i vcredist.msi /qb! /l*v $TEMP\vcredist_x86.log" ' # suppress all UI during installation.

--------------------------------------------------------------------------------------------------
