
Linux的文件系统，有 ext2, ext3, ext4, xfs, reiserfs, jfs, btrfs 等多种，除ext2是非日志文件系统以外，其它的全是日志型文件系统.

Windows的文件系统，有 fat16, fat32, ntfs, winfs 等，前两种是非日志文件系统，后两种是日志型文件系统。

日志型文件系统的好处就是，发生断电也不容易损坏文件系统，可以从日志中恢复。

各种文件系统，内部的分配机制、算法都是不一样的，外在表现就是支持的目录深度，文件个数，文件最大长度，顺序读写速度，随机读写速度，创建文件的速度，删除文件的速度，还有并发访问程度都不一样。

-----------------------------------

http://www.cnblogs.com/bangerlee/archive/2012/03/31/2426069.html

日志模式(Mode of journaling)

多数日志型文件系统(如ext3、 reiser)支持三种日志方式，分别是回写、顺序、全日志。


1. 回写(writeback)

在回写方式中，只有元数据被记录到日志中，先把元数据记录到日志区中，再更新文件系统的元数据，最后把实际数据写入主文件系统，该方式能提供较好的性能。

使用回写模式，假如元数据写入日志区后出现系统崩溃，在对文件系统进行恢复后，元数据和部分实际数据被更新，但恢复后的文件可能包含原先旧的垃圾数据。


  元数据写入日志区 --> 更新文件系统的元数据 --> 实际数据写入主文件系统

  write metadata to log [record] -> write metadata to filesystem -> write metadata to log [commit] -> write data to file


有三种情况，第一种，是修改/更新原来的数据，长度不变。第二种，增大文件，并且写入新的数据。第三种，缩小文件，并可能同时更新末尾或任意部分的数据。


2. 顺序(ordered)

在顺序方式中，只有元数据被记录到日志中，先把实际数据写入主文件系统，再把元数据写入日志区，最后再更新文件系统的元数据，顺序模式是日志文件系统默认使用的模式。

使用顺序模式，假如实际数据写入过程中出现系统崩溃，修复文件系统后，元数据不变，部分实际数据被更新。


  实际数据写入主文件系统 --> 元数据写入日志区 --> 更新文件系统的元数据

  write data to file -> write metadata to log [record] -> write metadata to filesystem -> write metadata to log [commit] 


3. 全日志(journal)

在全日志方式中，先把元数据和实际数据都写入日志区，然后再更新文件系统的元数据，最后把实际数据写入到主文件系统。

该方式提供了很高的安全性，不论系统在元数据写入日志区阶段还是实际数据写入日志区阶段发生崩溃，均不影响实际的主文件系统。但该模式为实现安全性、可靠性也付出了效率的代价，因为所有数据都要写入两次。


分析以上三种模式，共同的特点是元数据写入主文件系统之前，都先记录到日志区，这样就保证了主文件系统的元数据不被破坏。另外，进行文件系统恢复时，只需读取日志区中的信息即可进行恢复，而无需遍历整个文件系统。

-----------------------------------

https://zh.wikipedia.org/wiki/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F

日志的三个级别

在很多日志文件系统（如：ext3, ReiserFS）中，可以选择三个级别的日志：回写（writeback）、顺序（ordered）和数据（data, 全日志, full journal）。
回写

在回写模式中，只有元数据被记录到日志中，数据会被直接写入主文件系统。这种模式能提供较好的性能，不过有较大的风险。例如：在增大文件时，数据还未写入就发生崩溃，那么文件系统恢复后，文件后面就可能出现垃圾数据。
顺序

在顺序模式中，只有元数据被记录到日志中，但在日志被标记为提交前，数据会被写入文件系统。在这种模式下，如果在增大文件时，数据还未写入就发生崩溃，那么在恢复时这个事务会被简单的撤销，文件保持原来的状态。
数据

在数据模式(全日志)中，元数据和文件内容都先被写入日志中，然后在提交到主文件系统。这提高了安全性，但损失性能，因为所有数据要写入两次[1]。在这种模式下，如果在增大文件时，发生崩溃，那么可能有两种情况：

    日志完整：这时事务会被重新执行，修改会被提交到主文件系统
    日志不完整：这时主文件系统还未被修改，只需要简单放弃这个事务


