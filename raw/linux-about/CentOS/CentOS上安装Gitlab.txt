
CentOS 6.x 上安装 GitLab

From: http://www.centoscn.com/image-text/install/2015/0320/4929.html
      http://www.cnblogs.com/restran/p/4063880.html (补充, 用户 Ubuntu 14.04)

* 环境 Requirements

软件 	        版本
------         ------
CentOS 	        6.7
Python 	        2.6
Ruby 	        2.2.3 (2.1.3+)
Git 	        1.7.10+
Redis 	        2.0+
MySQL 	        5.1.0
GitLab 	        8-2-stable (v8.2.0)
GitLab Shell 	v2.6.0

** yum 源

为了提高软件安装速度，将yum源设置为阿里云开源镜像.
如果阿里的源也很慢，可以试试网易的源：http://mirrors.163.com/.help/CentOS6-Base-163.repo

$ cd /etc/yum.repos.d
$ cp CentOS-Base.repo CentOS-Base.repo.backup
$ wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo

重建源的缓冲，让新配置生效：

$ yum clean all
$ yum makecache
$ yum update

** 必要软件包

$ yum -y install libicu-devel patch gcc-c++ readline-devel zlib-devel libffi-devel openssl-devel make autoconf automake libtool bison libxml2-devel libxslt-devel libyaml-devel zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker

** 安装或更新Git

// 查看当前git版本
$ git --version

// 如果小于1.7.10则先卸载
$ yum remove git

// 下载最新的git并安装
$ cd /home
$ mkdir git
$ cd git
$ wget -O git-src.zip https://github.com/git/git/archive/master.zip
$ unzip git-src.zip
$ cd git-master
$ make prefix=/usr/local all
$ make prefix=/usr/local install
$ ln -fs /usr/local/bin/git* /usr/bin/

** 安装Ruby环境 (旧版本 v2.1.5 下载地址为 ftp://ftp.ruby-lang.org/pub/ruby/ruby-2.1.5.tar.gz )

$ mkdir /tmp/ruby && cd /tmp/ruby

$ curl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.2/ruby-2.2.3.tar.gz | tar xz

注: 这一步如果下载 ruby-2.2.3.tar.gz 太慢, 可以自己使用浏览器使用科学上网下载好再用FTP传到服务器上.
上传到/tmp/ruby目录下，然后使用下面的命令解压 tar 包：
$ cd /tmp/ruby
$ tar -xzvf ruby-2.2.3.tar.gz

编译ruby

$ cd ruby-2.2.3
$ ./configure --disable-install-rdoc
$ make && make install

$ ln -s /usr/local/bin/ruby /usr/bin/ruby
$ ln -s /usr/local/bin/gem /usr/bin/gem
$ ln -s /usr/local/bin/bundle /usr/bin/bundle

// 设置ruby gem源为淘宝
$ gem source -r https://rubygems.org/
$ gem source -a https://ruby.taobao.org/

------------------------------------------------------

// 设置ruby gem 源为淘宝(来自阿里官方的教程 https://ruby.taobao.org/)

$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install rails

如果你使用 Gemfile 和 Bundle (例如：Rails 项目)
你可以用 Bundler 的 Gem 源代码镜像命令。

$ bundle config mirror.https://rubygems.org https://ruby.taobao.org

这样你不用改你的 Gemfile 的 source。 

------------------------------------------------------

用 gem 安装 bunder:

$ gem install bundler --no-ri --no-rdoc

** 安装MySQL及初始化GitLab库

$ yum install mysql mysql-devel mysql-server -y
$ /etc/init.d/mysqld start
$ chkconfig mysqld on

// 登录mysql创建gitab的帐号和数据库

输入 mysql 命令, 回车.

mysql> CREATE USER 'gitlab'@'localhost' IDENTIFIED BY 'gitlab';
mysql> CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
mysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO 'gitlab'@'localhost';

输入 quit 命令退出mysql状态.

** 安装Redis (CentOS 6.7上Redis最新的版本是2.4.10)

首先要为 yum 添加 epel源 (因为默认yum是无法直接安装redis的)：
$ yum -y install epel-release

$ yum -y install redis
$ /etc/init.d/redis start
$ chkconfig redis on

redis相关的命令:

启动服务: systemctl start redis.service
停止服务: systemctl stop redis.service
重启服务: systemctl restart redis.service

** 添加git帐号并允许sudo

$ useradd --disabled-login --comment 'GitLab' git
$ echo "git ALL=(ALL)       NOPASSWD: ALL" >>/etc/sudoers

注: 可以使用 sudo passwd git 修改 git 用户的登陆密码.

** 添加gitlab-www帐号

$ useradd --comment 'GitLab WWW' gitlab-www

// 测试是否可以用git帐号登录数据库, 密码是gitlab
sudo -u git -H mysql -u gitlab -p -D gitlabhq_production

** 关于/home/git目录的权限

如果你创建 git 用户之前, /home/git 目录已经存在, 那么可以给/home/git目录添加一下权限:
$ cd /home
$ chown -R git log/

** 安装GitLab (最新稳定版的 tags 是 8-2-stable, 即GitLab Community Edition v8.2.0)

$ cd /home/git
$ sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 8-2-stable gitlab
$ cd /home/git/gitlab
$ sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml

// 编辑git路径, gitlab的host:port
$ vim config/gitlab.yml

// bin_path: /usr/local/bin/git
// host: localhost
// port: 80 

// 创建必要的文件夹，添加相应的权限

$ chown -R git log/
$ chown -R git tmp/
$ chmod -R u+rwX  log/
$ chmod -R u+rwX  tmp/

Create directory for satellites

$ sudo -u git -H mkdir /home/git/gitlab-satellites
$ sudo chmod u+rwx,g=rx,o-rwx /home/git/gitlab-satellites

为 GitLab 配置写 tmp/pids/ 和 tmp/sockets/ 目录的权限

$ sudo -u git -H mkdir tmp/pids/
$ sudo -u git -H mkdir tmp/sockets/

如果 tmp/pids/ 和 tmp/sockets/ 已经创建了, 则需要给git用户添加权限:
$ sudo chown -R git tmp/pids/
$ sudo chown -R git tmp/sockets/

给 pids 和 ockets 目录设置权限
$ sudo chmod -R u+rwX tmp/pids/
$ sudo chmod -R u+rwX tmp/sockets/

为 GitLab 配置写 public/uploads/ 目录的权限

$ sudo -u git -H mkdir public/uploads
$ sudo chmod -R u+rwX  public/uploads

// 复制配置文件
$ sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb
$ sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb

// 配置数据库连接信息
$ sudo -u git cp config/database.yml.mysql config/database.yml
$ sudo -u git -H vim config/database.yml
$ vim config/database.yml

// production:
//     username: gitlab
//     password: "gitlab"

** 安装GitLab-Shell (最新版是 2.6.6)

$ cd /home/git
$ sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-shell.git -b v2.6.6
$ cd gitlab-shell/
$ sudo -u git -H cp config.yml.example config.yml

// 编辑配置文件, 设置gitlab_url, redis-cli, log-level...
$ vim config.yml

// gitlab_url: "http://localhost/"
// /usr/bin/redis-cli

// 安装git-shell
$ sudo -u git -H ./bin/install

** 安装需要ruby的gems

$ cd /home/git/gitlab
$ sudo -u git -H bundle install --deployment --without development test postgres aws

** 初始化数据库(创建GitLab相关表)

$ sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production

** 安装启动文件以及日志切割文件

cp lib/support/init.d/gitlab /etc/init.d/gitlab
cp lib/support/init.d/gitlab.default.example /etc/default/gitlab
cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab

** 设置git帐号信息

$ sudo -u git -H git config --global user.name "GuoXiongHui"
$ sudo -u git -H git config --global user.email "gz_shines@msn.com"
$ sudo -u git -H git config --global core.autocrlf input

** 安装Nginx

-------------------------------------------------------------------

$ yum -y install nginx
$ vim /etc/nginx/nginx.conf

user                root git;
worker_processes    2;
pid                 /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # GITLAB
    # Maintainer: @randx
    # App Version: 5.0

    upstream gitlab {
        server unix:/home/git/gitlab/tmp/sockets/gitlab.socket;
    }

    server {
        listen *:80 default_server;     # e.g., listen 192.168.1.1:80; In most cases *:80 is a good idea
        server_name YOUR_SERVER_FQDN;   # e.g., server_name source.example.com;
        server_tokens off;              # don't show the version number, a security best practice
        root /home/git/gitlab/public;

        # Set value of client_max_body_size to at least the value of git.max_size in gitlab.yml
        client_max_body_size 5m;

        # individual nginx logs for this gitlab vhost
        access_log  /var/log/nginx/gitlab_access.log;
        error_log   /var/log/nginx/gitlab_error.log;

        location / {
            # serve static files from defined root folder;.
            # @gitlab is a named location for the upstream fallback, see below
            try_files $uri $uri/index.html $uri.html @gitlab;
        }

        # if a file, which is not found in the root folder is requested,
        # then the proxy pass the request to the upsteam (gitlab unicorn)
        location @gitlab {
            proxy_read_timeout      300;    # https://github.com/gitlabhq/gitlabhq/issues/694
            proxy_connect_timeout   300;    # https://github.com/gitlabhq/gitlabhq/issues/694
            proxy_redirect          off;

            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Host              $http_host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;

            proxy_pass http://gitlab;
        }
    }
}

-------------------------------------------------------------------

** 更改权限，启动nginx

$ nginx -t
$ chown -R git:git /var/lib/nginx/
$ /etc/init.d/nginx start

** 检测当前环境

$ sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production

** 拉取gitlab静态资源文件

$ sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production

** 启动gitlab

$ /etc/init.d/gitlab start

** 检测各个组件是否正常工作

$ sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production

